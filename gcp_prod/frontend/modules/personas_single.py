def main():
    import streamlit as st
    import requests
    import pandas as pd
    
    from modules import machine_learning_utils as mlu
    from modules import utils
    
    st.markdown("## Single Cluster Personas Prediction")
    st.write("By filling out the following form, it is possible to obtain an indication of the cluster of marketing personas to which the selected customer belongs.The marketing personas were pre-generated by an unsupervised algorithm (kprototypes) useful for clustering customers based on the similarity of their characteristics. Once the class of membership is extracted, possible marketing call-to-actions are generated for use toward the customer under consideration. \n The Personas Clusters are described below.")

    df = utils.data_retrieval("https://drive.google.com/file/d/1av3XEv59qOykE8v7tDu6GBJFbIkABiC8/view?usp=share_link")
    
    df = mlu.features_eng(df,'clustering')
    
    df = df[df['isFraud']==0]
    df = df.drop(columns='isFraud')
    
    cols = ['card1', 'card2', 'card3', 'card5', 'M4', 'id_21', 'id_22', 'id_23', 'id_24', 'id_25',
       'id_26', 'id_27', 'id_28', 'id_29', 'id_30', 'id_32', 'id_33', 'id_34',
       'id_35', 'id_36', 'id_37', 'id_38','num_transaction_per_time','addr1','P_emaildomain','R_emaildomain','addr2','multi_transaction_per_time']
    
    df = df.drop(columns=cols)
    
    st.write(df.head(2))
    
    st.markdown("## Clusters Personas Description")
    st.write("#### Cluster 0: Regular Desktop User with Credit Card")
    st.write("This cluster represents a user who regularly makes transactions using a desktop computer with the Chrome browser and Windows operating system. They have a moderate number of connected accounts and have a moderate time interval between transactions. This user utilizes a VISA credit card for purchasing type 'C' products.")
    st.write("#### Cluster 1: Occasional High-Value Desktop User with Debit Card")
    st.write("This cluster represents a user who occasionally makes high-value transactions using a desktop computer with the Chrome browser and Windows operating system. They have a moderate number of connected accounts and a high time interval between transactions. This user utilizes a VISA debit card for purchasing type 'R' products.")
    st.write("#### Cluster 2: Frequent Low-Value Mobile User with Debit Card")
    st.write("This cluster represents a user who frequently makes low-value transactions using a mobile device with the Chrome browser and an 'OTHER' operating system. They have a high number of connected accounts and a moderate time interval between transactions. This user utilizes a VISA debit card for purchasing type 'C' products. **This seems to be the cluster in which the most 'mysterious' customers are present, among whom we find some of the possible fraudsters**.")
    st.write("#### Cluster 3: Occasional High-Value Mobile User with Credit Card")
    st.write("This cluster represents a user who occasionally makes high-value transactions using a mobile device with the Safari browser and IOS operating system. They have a low number of connected accounts and a low time interval between transactions. This user utilizes a VISA credit card for purchasing type 'H' products.")
    
    num_col = ["TransactionAmt","num_accounts_related_to_user","num_days_previous_transaction"]
    
    df = df.astype(str)
    for i in df:
        if i in num_col:
            df[i] = df[i].astype(float)
    
    st.markdown("### Input form")
    form = st.form(key='my_form')
    features = dict()
    for i,j in enumerate(df):
        if j == "customer_id":
            pass
        elif j in num_col:
            features[j] = form.number_input('Insert number for {} related to the transaction under examination: '.format(j),key=i,value=0.028)
        else:
            features[j] = form.selectbox("Select type of {} related to the transaction: ".format(j),df[j].unique(),key=i)
    
            
    user = dict()
    for i,j in features.items():
        user[i] = [j]
    us = pd.DataFrame(user)
    
#     st.write(us.to_dict())
    
    submit_button = form.form_submit_button(label='Submit')

    if submit_button is True:
        response = requests.post("https://backend-4b-ylpi3mxsaq-oc.a.run.app/predict_personas",json=us.to_dict())
        if response.status_code == 200:
            result = response.json()
            st.write("The customer inputed belong to Personas #: ", result)
            if result == 0.0:
                st.markdown("Which correspond to the Regular Desktop User with Credit Card")
                st.markdown("Call to Action: \n - Offer them promotions and discounts on type 'C' products. \n - Provide personalized recommendations and advertisements based on their previous transactions and purchases. \n - Encourage them to connect more accounts for additional rewards and benefits.")
            elif result == 1.0:
                st.markdown("Which correspond to the Occasional High-Value Desktop User with Debit Card")
                st.markdown("Call to Action: \n - Offer them exclusive deals and promotions on type 'R' products. \n - Provide a VIP customer service experience, such as a dedicated support line. \n - Consider offering them a premium version of the credit or debit card with additional benefits and perks.")
            elif result == 2.0:
                st.markdown("Which correspond to the Frequent Low-Value Mobile User with Debit Card")
                st.markdown("Call to Action: \n - Offer them discounts and rewards for frequent purchases and transactions. \n - Make the mobile experience as smooth and user-friendly as possible, including mobile payment options. \n - Consider offering them a special debit card with lower fees and higher rewards.")
            else:
                st.markdown("Which correspond to the Occasional High-Value Mobile User with Credit Card")
                st.markdown("Call to Action: \n - Offer them exclusive promotions and deals on type 'H' products. \n - Provide a seamless mobile experience, including mobile payment options and personalized recommendations. \n - Consider offering them a premium credit card with additional benefits and perks.")
        else:
            st.write("Error in API call: ",response)
    
    
    
    
    